[tool.poetry]
name = "hvac_gym_private"
version = "0.1.0"
description = "Automated modelling of building HVAC and creation of reinforcement learning gym environments"
authors = ["Sam West <sam.west@csiro.au>"]

packages = [
    { include = "hvac_gym/**/*", from = "src" }
]

[tool.poetry.dependencies]
python = ">3.11.0,<3.13"
loguru = ">=0.5.3"
virtualenv = ">=20.24.2"
pydantic = "2.3.0"
plotly = "^5.20.0"
brickschema = "^0.7.5"
panel = "^1.3.8"
tqdm = "^4.66.2"
scikit-learn = "^1.4.2"
optuna = "^3.6.1"
scikit-elm = { git = "https://github.com/akusok/scikit-elm.git" }
dask = { version = "^2024.4.1", extras = ["array", "dataframe", "distributed"] }
py-spy = "^0.3.14"
pysr = "^0.18.4"
polars = "^0.20.25"
gymnasium = "^0.29.1"
joblib = "^1.4.2"
pandas = "^2.2.2"
overrides = "^7.7.0"
pendulum = "^3.0.0"
pythermalcomfort = "^2.10.0"
simple-pid = "^2.0.1"
dch-interface = { path = "lib/dch_interface-0.1.14-py3-none-any.whl" }
senaps-api-client = { path = "lib/senaps_api_client-2.16.1a0-py3-none-any.whl" }

[tool.poetry.group.dev.dependencies]
pytest = "^6.2.3"
Sphinx = "^7.3.7"
sphinx-rtd-theme = "^1.0.0"
myst-parser = "^3.0.1"
coverage = "^5.5"
pip-licenses = "^3.5.2"
pylint = "^3.2.3"
pre-commit = "^4.0.1"
pyproject-flake8 = "^0.0.1-alpha.4"
pytest-cov = "^3.0.0"
poethepoet = "^0.20.0"
mypy = "^1.11.1"
ruff = "^0.1.0"
black = "^23.9.1"
nbmake = "^1.4.6"
pytest-timeout = "^2.2.0"
liccheck = { git = "https://github.com/dhatim/python-license-check" }
scalene = "^1.5.40"
flameprof = "^0.4"
snakeviz = "^2.2.0"
pydata-sphinx-theme = ">=0.15.4"
types-python-dateutil = "^2.9.0.20240821"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = "csiroenergy"
url = "https://pkgs.dev.azure.com/csiro-energy/csiro-energy/_packaging/csiro-python-packages/pypi/simple/"
priority = "supplemental"

[build-system]
requires = ["setuptools", "poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
example_script = "hvac_gym.example:run()"

[tool.poe.tasks]
train = { cmd = "poetry run python src/hvac_gym/training/train_site.py", help = "Train the models" }
example = { cmd = "poetry run python src/tests/test_gym.py", help = "Run the example script" }
init = { shell = "poetry lock --no-update; poetry install --sync; poetry run pre-commit install", help = "(Re)initialise the project", interpreter = "posix" }
clean = { shell = "rm -rf output/.func_cache .coverage .mypy_cache .pytest_cache dist ./**/__pycache__ docs/build/ dist docs/build docs/source/_static docs/source/wpf.*.rst", help = "Clean up build artifacts", interpreter = "posix" }
clean_outputs = { shell = "rm -rf output/ results/", help = "Cleans output dirs", interpreter = "posix" }
lint = { cmd = "poetry run git add .pre-commit-config.yaml & poetry run pre-commit run", help = "Run pre-commit hooks" }
unit_tests = { shell = 'poetry run pytest --capture=sys -m "not integration" --cov-report term-missing --cov-report html --cov=src/ --durations=0 --durations-min=5.0 --tb=native --nbmake src/ --nbmake-timeout=5000', help = "Run unit tests", interpreter = "posix" }
int_tests = { shell = "poetry run pytest --capture=sys -m integration --cov-report term-missing --cov-report html --cov=src/ --durations=0 --durations-min=5.0 --tb=native", help = "Run integration tests", interpreter = "posix" }
test = { shell = "poetry run pytest --capture=sys --cov-report term-missing --cov-report html --cov=src/ --durations=0 --durations-min=5.0 --tb=native --nbmake src/ --nbmake-timeout=5000", help = "Run all tests", interpreter = "posix" }

publish = { cmd = "poetry publish --build --remote csiroenergy", help = "Publish the package to private pypi repo" }
docker_build = { cmd = "docker-compose build", help = "Build the docker-compose images" }
docker_run = { cmd = "docker-compose run run", help = "Run the main docker-compose container" }
docker_test = { cmd = "docker-compose run test", help = "Run the test docker-compose container" }
